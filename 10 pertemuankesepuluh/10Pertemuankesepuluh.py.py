# -*- coding: utf-8 -*-
"""DAA_pertemuan_10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Ziroint/Desain-AnalisisAlgoritma/blob/main/DAA_pertemuan_10.ipynb
"""

!pip install pulp

import pulp

#Instantiate our problem class
instance_profit_maximising_problem = pulp.LpProblem("ProfitMaximisingProblem", pulp.LpMaximize)

A = pulp.LpVariable('A', lowBound=0, cat='Integer')
B = pulp.LpVariable('B', lowBound=0, cat='Integer')

# Objective Function
instance_profit_maximising_problem += 5000 * A + 2500 *B, "Profit"
# Constraints
instance_profit_maximising_problem += 3*A + 2*B <= 20
instance_profit_maximising_problem += 4*A + 3*B <= 30
instance_profit_maximising_problem += 4*A + 3*B <= 44

#solve our problem
instance_profit_maximising_problem.solve()
pulp.LpStatus[instance_profit_maximising_problem.status]

#print our decision variable values
print(A.varValue)
print(B.varValue)

#print out objective function value 
print(pulp.value(instance_profit_maximising_problem.objective))

x_dan_y = pulp.LpProblem("mencari nilai x dan y", pulp.LpMaximize)

X = pulp.LpVariable('X', lowBound=0, cat='Integer')
Y = pulp.LpVariable('Y', lowBound=0, cat='Integer')

x_dan_y += 4*X + 3*Y == 34
x_dan_y += 5*X + Y == 37

x_dan_y.solve()

print("Nilai x: ", X.varValue)
print("Nilai y: ", Y.varValue)

#Budi membeli tiga pensil dan empat buku di toko Rana dengan harga Rp 11000,-. Jika Budi membeli lagi sebuah pensil dan tujuh buku ditoko yang sama dengan harga Rp 15000,-. Berapakah harga dua buah pensil dan enam buah buku jika Budi membeli kembali di toko Rana!

#Definisikan pensil=p , buku =b.

pensil_dan_buku = pulp.LpProblem("pensil dan buku", pulp.LpMaximize)

p = pulp.LpVariable('pensil', lowBound=0, cat='Integer')
b = pulp.LpVariable('buku', lowBound=0, cat='Integer')

pensil_dan_buku += 3*p + 4*b == 11000
pensil_dan_buku += p + 7*b == 15000

pensil_dan_buku.solve()

pensil = p.varValue
buku = b.varValue

print("harga pensil: ", pensil)
print("harga buku: ", buku)

total_belanja = 2*pensil + 6*buku
print("harga 2 pensil dan 6 buku: Rp ", total_belanja)

# Keliling sebuah persegi panjang sama dengan 44 cm. Jika lebarnya 6 cm lebih pendek dari panjanganya, carilah panjang dan lebar dari persegi panjang tersebut.

# kita definisikan panjang = pjg, lebar = lbr, keliling = k
persegi_panjang = pulp.LpProblem("panjang dan lebar", pulp.LpMaximize)

pjg = pulp.LpVariable('panjang', lowBound=0, cat='Integer')
lbr = pulp.LpVariable('lebar', lowBound=0, cat='Integer')

persegi_panjang += 2*(pjg+lbr) == 44
persegi_panjang += lbr == pjg-6

persegi_panjang.solve()

print("panjang: ", pjg.varValue)
print("lebar: ", lbr.varValue)

"""**Menggunakan Scipy**"""

#Import required Libraries
import numpy as np
from scipy.optimize import linprog
from scipy import linalg

#set the inequality constraints matrix
#note: the inequality constraints must be in the form of <=

A = np.array([[1,0],[2,3],[1,1],[-1,0],[0,-1]])

#set the inequality constraints vector
b = np.array([16,19,8,0,0])

# set the coefficients of the linear objective function vector
# note: when maximizing, change the signs of the c vector coefficient

c = np.array([-5,-7])

#solve linear programming problem
res = linprog(c,A_ub=A, b_ub=b)

#Print results
print('Optimal value:', round(res.fun*-1, ndigits=2),
      '\nx valus:', res.x,
      '\nNumber of iterations performed:', res.nit,
      '\nStatus:', res.message)

m = np.array([[4,12],[2,1]])
n = np.array([28,21])

res2 = linalg.solve(m,n)

print(res2)

# Lisa dan Muri bekerja pada pabrik tas. Lisa dapat menyelesaikan 3 buah tas setiap jam dan Muri dapat menyelesaikan 4 tas setiap jam. Jumlah jam kerja Lisa dan Muri adalah 16 jam sehari dengan jumlah tas yang dibuat oleh keduanya adalah 55 tas. Jika jam kerja keduanya berbeda, tentukan jam kerja mereka masing-masing.

tas = np.array([[3, 4], [1, 1], [-1, 0], [0, -1]])
jam = np.array([55, 16, 0, 0])
c = np.array([-7, -9])
res3 = linprog(c, A_ub=tas, b_ub=jam)

print('Optimal value:', round(res3.fun*-1, ndigits=2), 
      '\nx values:', res3.x,
      '\nNumber of iterations performed:', res3.nit,
      '\nStatus:', res3.message)